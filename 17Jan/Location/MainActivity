package com.example.rawan.location

import android.Manifest
import android.annotation.SuppressLint
import android.annotation.TargetApi
import android.content.pm.PackageManager
import android.location.Location
import android.os.Build
import android.support.v7.app.AppCompatActivity
import android.os.Bundle
import android.support.design.widget.Snackbar
import android.support.v4.app.ActivityCompat
import android.support.v4.content.ContextCompat
import android.widget.LinearLayout
import com.google.android.gms.location.ActivityRecognitionClient
import com.google.android.gms.location.FusedLocationProviderClient
import com.google.android.gms.location.LocationCallback
import com.google.android.gms.location.LocationServices
import com.google.android.gms.maps.CameraUpdateFactory
import com.google.android.gms.maps.GoogleMap
import com.google.android.gms.maps.OnMapReadyCallback
import com.google.android.gms.maps.SupportMapFragment
import com.google.android.gms.maps.model.LatLng
import com.google.android.gms.maps.model.MarkerOptions

class MainActivity : AppCompatActivity(), OnMapReadyCallback {
    private var map: GoogleMap? = null
    private val permissionsLocations = arrayOf<String>(
        Manifest.permission.ACCESS_COARSE_LOCATION
        , Manifest.permission.ACCESS_FINE_LOCATION
    )
    private val requestLocation = 3
   private  lateinit var locationClient: FusedLocationProviderClient
    private var layout: LinearLayout? = null

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)
        layout = findViewById(R.id.layout)

        val supportFormat = supportFragmentManager.findFragmentById(R.id.map) as SupportMapFragment
        supportFormat.getMapAsync(this)
        locationClient=LocationServices.getFusedLocationProviderClient(this)
        if (ContextCompat.checkSelfPermission(this, permissionsLocations[0])
            != PackageManager.PERMISSION_GRANTED ||
            ContextCompat.checkSelfPermission(this, permissionsLocations[1]) != PackageManager.PERMISSION_GRANTED
        ) {
            requestLocationPermissions()
        }else getLocation()

    }
    @SuppressLint("MissingPermission")
    private fun getLocation(){
        locationClient.lastLocation.addOnSuccessListener { location:Location ->
            if(map!=null){
                val userLocation=LatLng(location.latitude,location.longitude)
                map!!.addMarker(MarkerOptions().position(userLocation).title("My Location"))
                map!!.moveCamera(CameraUpdateFactory.newLatLng(userLocation))
            }
        }
    }
    @TargetApi(Build.VERSION_CODES.M)
    private fun showSnackBar(action: Int, idString: Int)
    {
        if(action==0)
        {
            Snackbar.make(layout!!,idString,Snackbar.LENGTH_INDEFINITE).show()

        }else
        {
            Snackbar.make(layout!!,idString,Snackbar.LENGTH_INDEFINITE)
                .setAction(android.R.string.ok){
                    ActivityCompat.requestPermissions(this,permissionsLocations,requestLocation)
                }.show()
        }
    }
    @TargetApi(Build.VERSION_CODES.M)
    private  fun requestLocationPermissions(){
        if(ActivityCompat.shouldShowRequestPermissionRationale(this,permissionsLocations[0])||
                ActivityCompat.shouldShowRequestPermissionRationale(this, permissionsLocations[1])){

        }
       else{
            ActivityCompat.requestPermissions(this, permissionsLocations,requestLocation)
        }

    }

    override fun onMapReady(map: GoogleMap?) {
        this.map=map
    /*    val sydney = LatLng( -34.0,  151.0)
        map!!.addMarker(MarkerOptions().position(sydney).title(  "Marker in Sydney"))
        map.moveCamera(CameraUpdateFactory.newLatLng(sydney))*/


    }

    override fun onRequestPermissionsResult(requestCode: Int, permissions: Array<out String>, grantResults: IntArray) {
        var granted=0
        if(requestCode==requestLocation){
            for(result in grantResults){
                if(result!=PackageManager.PERMISSION_GRANTED){
                    granted=1
                    break
                }
            }
            if(granted==0)
            {
                getLocation()
            }else{
                showSnackBar(0,R.string.permission_not_granted)
            }
        }
    }
}
